package com.sleepwalker.utils;import java.sql.Timestamp;import java.text.DateFormat;import java.text.ParseException;import java.text.SimpleDateFormat;import java.util.Calendar;import java.util.Date;import org.apache.commons.lang.StringUtils;import org.joda.time.DateTime;import org.joda.time.Days;import org.slf4j.Logger;import org.slf4j.LoggerFactory;public class DateUtil {    private static Calendar     beginCal;    private static Calendar     endCal;    private static final String DAY_TIME_START  = "00:00:00";    private static final String DAY_TIME_END    = "23:59:59";    private static final String DATE_FORMAT_STR = "yyyy-MM-dd HH:mm:ss";    private static Logger       logger          = LoggerFactory.getLogger(DateUtil.class);    public static void main(String[] args) {        Timestamp timestamp = new Timestamp(new Date().getTime());        System.out.println(addDay(90, timestamp));        System.out.println(timestamp);        System.out.println(getHourDiff(timestamp));    }    /**     * 将时间戳格式化成日期+timeStr     * @param timeStr     * @param timestamp     * @return     */    public static Timestamp rebuildTimestamp(String timeStr, Timestamp timestamp) {        if (timestamp == null || StringUtils.isBlank(timeStr)) {            return null;        }        String date = timestamp.toString().substring(0, 11);        SimpleDateFormat sdf = new SimpleDateFormat(DATE_FORMAT_STR);        try {            return new Timestamp(sdf.parse(date + timeStr).getTime());        } catch (ParseException e) {            logger.error("", e);        }        return null;    }    /**     * 将输入的时间戳 格式化成 日期+00:00:00     * @param timestamp     * @return     */    public static Timestamp initDayTimeStart(Timestamp timestamp) {        return rebuildTimestamp(DAY_TIME_START, timestamp);    }    /**     * 将输入的时间戳 格式化成 日期+23:59:59     * @param timestamp     * @return     */    public static Timestamp initDayTimeEnd(Timestamp timestamp) {        return rebuildTimestamp(DAY_TIME_END, timestamp);    }    public static int getHourDiff(Timestamp beComparedTime) {        return getHourDiff(beComparedTime, new Timestamp(new Date().getTime()));    }    public static Timestamp addDay(int dayNum, Timestamp timestamp) {        if (timestamp == null) {            timestamp = new Timestamp(new Date().getTime());        }        return new Timestamp(timestamp.getTime() + dayNum * 24 * 60 * 60 * 1000L);    }    public static int getHourDiff(Timestamp beComparedTime, Timestamp compareTime) {        if (compareTime == null) {            compareTime = new Timestamp(new Date().getTime());        }        if (beComparedTime == null) {            return (int) (compareTime.getTime() / 1000 / 60 / 60);        }        long diffMillisecond = compareTime.getTime() - beComparedTime.getTime();        return (int) (diffMillisecond / 1000 / 60 / 60);    }    public static boolean isBetweenDate(String beginDate, String endDate, Date currentDate) {        if (StringUtils.isNotBlank(beginDate) && StringUtils.isNotBlank(endDate)            && currentDate != null) {            String[] beginDateArr = beginDate.split("-");            String[] endDateArr = endDate.split("-");            if (beginDateArr.length == 3 && endDateArr.length == 3) {                beginCal = Calendar.getInstance();                setDate(beginCal, beginDateArr[0], beginDateArr[1], beginDateArr[2]);                endCal = Calendar.getInstance();                setDate(endCal, endDateArr[0], endDateArr[1], endDateArr[2]);                if (beginCal.getTime().before(currentDate) && endCal.getTime().after(currentDate))                    return true;            }        }        return false;    }    private static void setDate(Calendar cal, String year, String month, String date) {        cal.set(Integer.parseInt(year), Integer.parseInt(month) - 1, Integer.parseInt(date), 0, 0,            0);    }    /**     * 小邮局弹窗时间获取工具类  时间：当天消息，显示“今天+时间”；前一天消息显示“昨天+时间”；更早之前显示“月日+时间”，超过跨年显示“年月日+时间”     * @param compareDate       new Date()时间     * @param beComparedDate    消息的创建时间     * @return     */    public static String emailPopWinTime(Date compareDate, Date beComparedDate) {        if (compareDate != null && beComparedDate != null) {            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");            SimpleDateFormat sdfTime = new SimpleDateFormat("HH:mm");            SimpleDateFormat sdfMonthAndTime = new SimpleDateFormat("MM-dd HH:mm");            SimpleDateFormat sdfFull = new SimpleDateFormat("yyyy-MM-dd HH:mm");            String compareDateStr = sdf.format(compareDate);            String beComparedDateStr = sdf.format(beComparedDate);            Calendar caleCompare = Calendar.getInstance();            Calendar caleBeCompared = Calendar.getInstance();            caleCompare.setTime(compareDate);            caleBeCompared.setTime(beComparedDate);            if (compareDateStr.equals(beComparedDateStr))                return "今天 " + sdfTime.format(beComparedDate);            if (caleCompare.get(Calendar.YEAR) > caleBeCompared.get(Calendar.YEAR))                return sdfFull.format(beComparedDate);            else if (caleCompare.get(Calendar.YEAR) == caleBeCompared.get(Calendar.YEAR)) {                if (caleBeCompared.get(Calendar.DAY_OF_MONTH) + 1 == caleCompare                    .get(Calendar.DAY_OF_MONTH))                    return "昨天 " + sdfTime.format(beComparedDate);                else                    return sdfMonthAndTime.format(compareDate);            }        }        return "";    }    /**     * 获取两个时间相隔的天数，例如2016-04-02 20:00:21和2016-04-03 04:12:12之间相隔一天     * @param smDate 开始时间     * @param bDate 结束时间     * @return     */    public static int daysBetween(Date smDate, Date bDate) {        DateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");        try {            smDate = sdf.parse(sdf.format(smDate));            bDate = sdf.parse(sdf.format(bDate));        } catch (ParseException e) {        }        DateTime smDt = new DateTime(smDate);        DateTime bDt = new DateTime(bDate);        if (smDate.before(bDate)) {            return Days.daysBetween(smDt, bDt).getDays();        }        return Days.daysBetween(bDt, smDt).getDays();    }}